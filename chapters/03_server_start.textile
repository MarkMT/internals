h1. Overview of this chapter

What you are going to learn in this chapter:

* How Merb bootstraps itself.
* How daemonization works.
* How Merb manages pid files.
* How Merb is started and stopped.
* How Merb reacts to signals sent to it.

This chapter is about framework plumbing, really low level things.
It heavily intersects with certain parts of the next chapter.
You can think of it as two phases of boot: this chapter describes
early stage (bootstrap) and second one describes later stage
(bootloaders run).

If you are not interested in all the gory details of framework/server
operation, feel free to skip this chapter. Make sure you look through
the next one in any case though: some details in the next chapter are
not directly related to boot and may help a lot in understanding of Merb,
yet are simple enough even for beginners.

h1. Diving in

So, command line options (or programmatically passed options to <code>Merb::Config</code>) are
parsed at this point and Merb is ready to start its boot process.
Right after that Merb does basically 3 things:


* Merb.environment and Merb.root are initialized from Merb configuration.
* Merb checks the action you give it in arguments (kill, forced kill, fast redeploy, etc).
* Merb does its early stage work of managing pid files, process privileges and daemonization.

To find all the details, we need to begin with the Merb.start
method. It can be found in merb-core/lib/merb-core.rb.

When the server starts, Merb has to figure out whether there is another instance
already bound to given port(s), so it calculates the pid file path, reads it and checks if the process is alive.

If no other instance is running on the given ports, Merb runs the bootloader 
and starts the Rack adapter. This pid file requirement
means that if you set the Merb port, daemonization options or pid file
location in the init file of your application, it would have no effect
on application start because the init file is loaded later in the
process. So you must specify the _port_, _daemonization option_ and _pid file
location_ from the command line or in the startup script you may use
instead of the default in the merb executable.

Note that during this early stage the logger is bound to stdout, so
even though it is not really initialized at this point, you can see some output.

You can have a look at implementation of startup code in
Merb::Server.start (merb-core/lib/merb-core/server.rb).

Most of the methods used in server.rb are simple. The most tricky thing
is probably how daemonization works. Merb forks off and the child process 
places itself into a new group, becoming a group leader and thus detaches 
from tty. Then the child process reopens its streams: stdin and stdout to /dev/null,
stderr to stdout, and starts trapping TERM signal. The original process exits.

A couple of notes: child process chdirs to wherever Merb.root points to, 
pid file is removed on exit.

Details can be found in Merb::Server#daemonize (merb-core/lib/merb-core/server.rb).
<pre><code>
def daemonize(port)
  Merb.logger.warn! "About to fork..." if Merb::Config[:verbose]
  fork do
    Process.setsid
    exit if fork
    Merb.logger.warn! "In #{Process.pid}" if Merb.logger
    File.umask 0000
    STDIN.reopen "/dev/null"
    STDOUT.reopen "/dev/null", "a"
    STDERR.reopen STDOUT
    begin
      Dir.chdir Merb::Config[:merb_root]
    rescue Errno::EACCES => e
      Merb.fatal! "You specified Merb root as #{Merb::Config[:merb_root]}, " \
        "yet the current user does not have access to it. ", e
    end
    at_exit { remove_pid_file(port) }
    Merb::Config[:port] = port
    bootup
  end
rescue NotImplementedError => e
  Merb.fatal! "Daemonized mode is not supported on your platform. ", e
end
</pre></code>

To finish this pid files story, here's how Merb figures out if
the process specified in found pid file is alive:

* Find out pid file location.
* Read process id from it.
* Send signal 0 to that pid and see how it works out.

In both daemon and foreground run scenarios, boot is started next
by calling Merb::Server.bootup:

* Shutdown on SIGTERM signal.
* Run bootloaders.
* Start Rack adapter.

Details are in Merb::Server.bootup (merb-core/lib/merb-core/server.rb).

Bootloader loads and initializes the framework, application code and does
things like template inlining (don't worry if you do not know what
it means, it's explained later in the handbook).

Since boot process involves several steps and is important part of
the framework operation, it takes the whole next chapter.


Now let's look at how pid files are stored and removed. It's simple.
When we store process id to the file (so other programs can
figure out what Merb process id for certain port is), we
follow simple convention:

* Pid file contains one integer: current process id.
* Pid file is stored to the same directory as logs.
* Pid file is named as "merb.N.pid" where N is port number.
* Master process (more about it in the next chapter) is named as "merb.master.pid".

Code for this step can be found in Merb::Server.store_details 
(merb-core/lib/merb-core/server.rb) while the aforementioned naming scheme 
implementation is in Merb::Server.pid_file (merb-core/lib/merb-core/server.rb)

* Merb calculates the path to the pid file using the port it bound to and some
simple conventions
* If a pid file already exists, it's removed from the file system.

The latter step is implementd in Merb::Server#remove_pid_file.

h2. Killing time

<blockquote>
The silence is over, they attack again
Killing and hatred drive me insane
Reports come in of a heavy attack
Message received, we're moving back
</blockquote>

(Sweet Savage "Killing time")

So far, so good. But what if you ask merb to stop running instances?
How violent will merb get?

It turns out not very. Here is how it works in the nutshell:

* Figure out what signal to use from the passed action.
* SIGINT is used for graceful stop.
* SIGKILL is used for forced stop.
* Read the pids from the existing pid files, send the signal to the process with an id in it.

Details are in Merb::Server.kill_pid (merb-core/lib/merb-core/server.rb).

Some gory details: Ruby can use signal names or numbers. Merb converts numbers
into names using mapping returned by Signal.list. Before pid file paths
are calculated, framework layout should be initialized so here we get ahead of
ourselves a bit and look at one of Merb's bootloaders that gets mentioned:
*BuildFramework* bootloader. It just sets paths layout: where config dir is, 
where logs dir is, _et cetera_.

You also can see the master process mentioned, it is explained in details in
the next chapter.

To stop the process in the given pid file, Merb::Server.kill_pid is used.
It takes a signal to use and the pid file path, and does the following:

* Reads pid.
* Uses Process.kill to send signal to the pid.
* Removes pid file.
* Handles possible exceptions and logs meaninful messages.

The default signal is SIGKILL.
You can find the code in Merb::Server.kill_pid (merb-core/lib/merb-core/server.rb)

To be finished...
