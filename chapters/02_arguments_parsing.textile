h1. Arguments parsing.

The executable file <tt>merb</tt> that every Merb user has seen for sure, looks like this:

<pre><code>
#!/usr/bin/env ruby
require "merb-core"

if ARGV[0] && ARGV[0] =~ /^[^-]/
  ARGV.push "-H"
end

unless %w[-a --adapter -i --irb-console -r --script-runner].any? { |o| ARGV.index(o) }
  ARGV.push *%w[-a mongrel]
end

Merb.start
</code></pre>

This means that Merb uses the Mongrel adapter by default and the fun begins in Merb.start.
What does Merb.start do? 	It parses and sets up the application config, then runs boot
and does rackup.

Arguments can be passed as either Hash or array (ARGV in default merb script),
in the latter case arguments are parsed. In both cases Merb::Config.setup is called.

Merb::Config is a decorator around a configuration Hash. It delegates most of
the common operations you expect to see on a Hash-like object to the underlying Hash,
but also has a dozen of default configuration options and means to parse/update
the configuration.

Lets start with the default configuration settings:

Merb::Config.defaults (lib/merb-core/config.rb):
<pre><code>
# ==== Returns
# Hash:: The defaults for the config.
def defaults
  @defaults ||= {
    :host                   => "0.0.0.0",
    :port                   => "4000",
    :adapter                => "runner",
    :reload_classes         => true,
    :environment            => "development",
    :merb_root              => Dir.pwd,
    :use_mutex              => true,
    :session_id_key         => "_session_id",
    :log_delimiter          => " ~ ",
    :log_auto_flush         => false,
    :disabled_components    => [],
    :deferred_actions       => [],
    :verbose                => false
  }
end
</code></pre>

Although, most of these options are well named and explain their purpose, they are not
complete so let's be explicit and briefly describe each of the options Merb core knows
about and uses:

Server & environment options:

* **_adapter_** is the Rack adapter (more on Rack machinery later) and can be one of mongrel, thin, ebb, swiftiplied_mongrel, evented_mongrel, webrick or irb (Merb console). Usually passed from the command line or in spec helper.

* **_app_** is a Rack application used by the Merb Rack adapter.	It's not supposed to be set manually.

* **_cluster_** is a number of Merb instances in a cluster that you want to run.

* **_daemonize_** tells Merb to detach from tty and operate in a child process.

* **_deferred_actions_** is an array of symbols that specify which actions in the application take a long time to execute and should be deferred by event-driven servers (see below).

* **_disabled_components_** is a list of framework components that you can exclude from being loaded to save some memory on stuff your application does not use.

* **_environment_** is the environment you start your Merb application in. Usually one of development, testing, or production, but you can add any environment you want like stage1, stage2, prerelease and hostile_martian_environment.

* **_exception_details_** is a boolean telling Merb if it should show a detailed exception backtrace in the browser when trouble strikes.

* **_framework_** is a Hash that holds the application components layout.

* **_group_** is an OS group the Merb application runs from.

* **_host_** and **_port_** are the host and port Ruby server runs on.

* **_ignore_tampered_cookies_** tells Merb to not raise an exception when the cookie integrity check fails.

* **_init_file_** is the initialization file path.

* **_log_auto_flush_** specifies if the logger flushes write buffer immediately (default value is true) or once in a while. FIXME: when exactly?

* **_log_delimiter_** lets you change the log record delimiter (not used that often).

* **_log_file_** is a path to a file which Merb logger writes to.

* **_log_level_** sets the logger level, from :info to :fatal. Defaults to :error for production environment.

* **_memory_session_ttl_** is a TTL (time to live) period for memory session storage.

* **_merb_root_** is a directory that is considered Merb application's root.

* **_path_prefix_** is a global path the application uses. This is stripped out by Rack before routing the request.

* **_pid_file_** specifies the location of the [PID](http://en.wikipedia.org/wiki/Process_identifier) file.

* **_rackup_** is a rackup file path. By default Merb loads rack.rb in config directory.

* **_reload_classes_** specifies if Merb should reload application classes on each request or cache them.

* **_reload_templates_** is supposed to let you avoid templates inlining and reload them on every request. NoOp at the moment of writing.

* **_reload_time_** is a period of class reload, defaults to 0.5 second.

* **_router_file_** is name of the router file, default is 'router.rb'.

* **_default_cookie_domain_** is a domain used for cookies, if no explicit domain specified.

* **_session_expiry_** is the session expiration period, defaults to 2 weeks.

* **_session_id_key_** is the session identifier.

* **_session_secret_key_** is the session identifier salt.

* **_session_store_** is the default session storage; one of memcache, memory, datamapper, sequel or activerecord (registered by plugins).

* **_session_stores_** is an array of additional session stores, in case you really need them.

* **_testing_** is a boolean flag indicating if Merb runs in testing environment (for instance, on test suite run).

* **_use_mutex_** specifies if Merb should use mutex lock for action dispatch. If you do not use the threadsafe library (like ActiveRecord), you probably want to turn it on. If all of your application code is thread-safe, feel free to turn it off and have a performance gain.

* **_user_** is an OS user Merb application runs from.

* **_verbose_** specifies if extra output should be printed when Merb starts the server and boots.

Note that by default, Merb uses the current working directory and mutex lock is ON by default.
Logger does not flush automatically unless you (kindly) ask Merb about it.

FIXME: when it's flushed, on what events?

If you noted that environment and testing options overlap, you probably wonder
which takes precedence. The answer is testing. If Merb sees that testing or
the $TESTING global variable is set to true, it resets environment to "test".

Here is how it looks like in the source:

Merb.testing? (lib/merb-core.rb):
<pre><code>
# ==== Returns
# Boolean:: True if Merb environment is testing for instance,
# Merb is running with RSpec, Test::Unit of other testing facility.
def testing?
  $TESTING || Merb::Config[:testing]
end

# Set the environment if it hasn't already been set.
Merb.environment ||= ENV['MERB_ENV'] || Merb::Config[:environment] || (Merb.testing? ? 'test' : 'development')
</code></pre>


Two more things that probably need some explanation are disabled components and
deferred actions. Disabled components are parts or dependencies of Merb that you
can leave out: like the native JSON gem (for instance, if your Merb application does
not use JSON at all, it makes no sense to waste memory). Actually the only component
in merb-core that can be left out at the moment of writing _is_ the JSON gem, set disabled_components to [:json]
if you do not want Merb to load it.

_Deferred actions_ are a way to specify which actions in the application you
would like to defer to a later time--perhaps because they take a long time to execute or you would like specific control over when they are called. The idea is that event-driven web servers (Thin, Ebb), that are usually faster than
Mongrel, will spawn a thread to run deferred actions so the event loop is not stopped
and the server can continue serving requests. _Usually very useful for file upload actions._

Verbose options makes Merb print to STDOUT extra information about what's going on.
If you want really, really verbose information (for instance, want to know what compiled
routes look like), set the $DEBUG variable to true in the config file.

Merb::Config.parse_args parses arguments and merges them into the default configuration
using Merb::Config.setup. Ruby has a good library for parsing command line arguments
called OptParse and that's what parse_args uses under the covers.
