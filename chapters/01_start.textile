---
layout: post
title: "Start."
index: "Getting Started"

previous: "00_preface"
next: "02_arguments_parsing"
---

There are a couple of open source Merb book attempts, but they all explain
how to use Merb. As an occasional Merb contributor, I always wanted a book that
really saves me time when it comes to understanding how things work inside
of the framework. Merb is meant to be highly hackable, after all.

So I decided to write this little book about Merb internals.

h2. Rationale

* Hacker's framework needs a hacker's handbook.

h2. How to Get the Most From this Book

An _investigative mind_ should be adopted by the reader of this book. If you are
not the least but intellectually curious enough to try to understand what is going 
on in merb-core, there will be no way for you to ever know it. If you are a beginner, 
the best approach will be to think proactively about the subject matter and try as 
many various ways to understand the information contained inside. 

The reader will get the most from this book if it is used as a companion to
the Merb "source code":http://github.com/wycats/merb/tree/master. In
fact, why don't you go to that link right now, fork the repository and clone it to your
local machine.  When you've done that, take a look around. Now you have a clone
of the actual subject of our study, you can follow along with the development
process now and even help with the job of improving the code and documentation.
You can periodically pull updates from the master branch and see what changes.

There are several top-level rake tasks available inside the top merb/ directory. 
You will notice a bunch of merb-this and merb-that directories. For now the main
code we are concerned about lives in merb-core.

Possibly, a helpful excercise would be to run <code>rake spec</code> and read through the output.
Go as far as you care to through this. If nothing else, glance at the behavior
described in the spec output and you will see what merb is at least _expected_
to do (at the framework level). But the next most important step is to move to the
source code. What you find will only challenge you to the degree that you
understand Ruby. I (Dylan) am new to programming in general, and even newer to
Ruby, so I find things I did not know (about Ruby) all the time as I read
through the source code of Ruby software projects. My difficulty
in understanding the source code to Merb is only hindered by my lack of Ruby knowledge 
and my inability see how all the pieces fit together.

There is a lot to know but rather than be frustrated by it, try to
tackle it systematically. If you need to, take a break from it for a moment or
two, but then attempt honestly and thoroughly to find a way to understand it. I
find that keeping a journal of things learned to be helpful. Find what works for
you and go with that... whatever, go!


h2. Lets look at a picture

One thing I noticed this time looking through the source was a folder called
_docs_ I never noticed before (imagine that). Inside it was a .png file that
caught my eye--I opened it and saw a picture I had never seen before, a
beautiful picture. I had to zoom in to see it but it was a diagram of the _call
stack_ for Merb, basically the outline for how this book is systematically structured.
Take a look for yourself on "github":http://github.com/deepthawtz/merb/blob/3e95978391e1ad20269a1e5e00ab98b86680a0de/merb-core/docs/merb-core-call-stack-diagram.png
or, if you have a cloned copy like we recommended, open it yourself. It starts
with <code>Merb.start(argv = ARGV)</code> and moves from left to right through
the stages. There are even references to the source code of the individual
method calls. It may be helpful to you to refer to this picture again as you read through this
handbook. I've put a copy of it
"here":http://ghettochip.com/images/merb-core-call-stack-diagram.png and a pdf
version right
"here":http://ghettochip.com/images/merb-core-call-stack-diagram.pdf


h2. What happens when you run the <tt>merb</tt> executable.

* Start.
* Arguments parsing.
* Server start.
* Framework boot.

h2. When a request comes in.

* Merb on Rack.
* Rackup.
* Dispatch.
* Filters
* Sessions.
* MIME formats and what's behind the "provides" API.
* Rendering overview.
* Template inlining.
* Router internals.
* Merb application server in details.
* Plugins.

h2. Plugins.

* DataMapper
* Sequel
* ActiveRecord
* Slices
* Merb action-args
* Merb auth
* Merb Haml
* Merb parts

h2. Development.

* Overview.
* Public and private specs.
* Repository organization.
