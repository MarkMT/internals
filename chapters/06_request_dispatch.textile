---
layout: post
title: "Request dispatch."
index: "Request Dispatch"

previous: "05_rack_machinery"
next: "07_filters"

---

h2. Briefly.

* Merb::Request is instantiated from Rack environment.
* Merb Rack application runs Merb::Dispatcher.handle.
* Handling is delegated to Merb::Request#handle.
* Handler asks router for the route.
* If route is redirecting, action is not dispatches and status/body are set.
* If route is not redirecting, handler instantiates the controller from
  request and route params.
* Before filters are run.
* Controller method is called (action is dispatched). This is the only step
  that is processed with mutex lock (if it is used at all).
* After filters are run.
* Control returned to Merb Rack application.
* Date header set by Merb Rack application unless it's been already set.
* 3-tuple returned from Merb Rack application to web server.
* Web server sends headers and the body to the client and (possibly)
  closes the connection.


h2. Details.
Once Rack environment is passed into Merb Rack application, dispatch
process is started. Initial code in Merb that is executed after
web server passes a request to the framework is, you guessed it,
Rack application. By default it is Merb::Rack::Application#call
in lib/merb-core/rack/application.rb.

Dispatcher wraps Rack environment into Merb::Request and passes
it to Merb::Dispatcher.handle. Dispatcher used to do all the work itself but in
Merb 0.9.5 development cycle it started to delegate to Merb::Request#handle.

Merb::Request is in lib/merb-core/dispatch/request.rb.

Handling method first asks router for a route that matches request conditions
(path, host, user agent, etc: with Merb's deferred routes anything in Rack
environment can be used as routing condition). If route is redirecting,
redirect happens immediately without even dispatching the action or running
filters.

If route is not redirecting, action dispatch is started by
Merb::Request#dispatch_action. It instantiates the controller, passes in
the request itself and calls _dispatch on the controller synchronized
with mutex if configured to do so.

[Merb::AbstractController#dispatch_action]
<pre><code>
def dispatch_action(klass, action, status=200)
  # build controller
  controller = klass.new(self, status)
  if Dispatcher.use_mutex
    @@mutex.synchronize { controller._dispatch(action) }
  else
    controller._dispatch(action)
  end
  controller
end
</code></pre>

Synchronization is needed for non-threadsafe libraries that may
be used. DataMapper and ActiveRecord 2.2 are told to be thread-safe
so you can turn the mutex lock off for applications that use it
as long as you write a thread-safe code yourelf.

h2. Controllers.

Merb has AbstractController that knows nothing about the web but
knows how to process filters and look up templates
Merb::Controller#_dispatch does benchmarking of action run time and
calls parent's method:

[Merb::Controller#_dispatch]
<pre><code>
def _dispatch(action)
  setup_session
  self.action_name = action
  
  caught = catch(:halt) do
    start = Time.now
    result = _call_filters(_before_filters)
    @_benchmarks[:before_filters_time] = Time.now - start if _before_filters
    result
  end

  @body = case caught
  when :filter_chain_completed  then _call_action(action_name)
  when String                   then caught
  when nil                      then _filters_halted
  when Symbol                   then __send__(caught)
  when Proc                     then caught.call(self)
  else
    raise ArgumentError, "Threw :halt, #{caught}. Expected String, nil, Symbol, Proc."
  end
  start = Time.now
  _call_filters(_after_filters)
  @_benchmarks[:after_filters_time] = Time.now - start if _after_filters
  finalize_session
  @body
end
</code></pre>


This is Merb::Controller#_dispatch. It calls session setup, processes filters and
finalizes session.

Once before filters are run, AbstractController figures out if filter chain halted and
does one of the following:

* If it didn't, call the action.
* If it did and result is a string, this string is sent to the client.
* If it did and result is a symbol, it's send to self (controller instance).
* If filter chain returns a Proc, it's called.

As you may expect, controller then calls after filters and
calls session finalization.
Note that neither AbstractController, nor Merb::Controller has
implementation of session setup/finalization, but session
mixin included into Merb::Controller on framework boot
provide implementation for specific back end, like cookies,
database, memcached or something else.

AbstractController#_call_action is very simple and can be overridden
in subclasses:

[Merb::AbstractController#_call_action]
<pre><code>
def _call_action(action)
  send(action)
end
</code></pre>

Now back to Merb::Dispatcher for a little bit. What if action raises an exception?
As you can see in Merb::Request#handle code above, it's rescued and re-dispatched
with dispatch_exception method:

[Merb::Request#dispatch_exception]
<pre><code>
def dispatch_exception(exception)
  Merb.logger.error(Merb.exception(exception))
  self.exceptions = [exception]
  
  begin
    e = exceptions.first
    
    if action_name = e.action_name
      dispatch_action(Exceptions, action_name, e.class.status)
    else
      Merb::Dispatcher::DefaultException.new(self, e.class.status)._dispatch
    end
  rescue Object => dispatch_issue
    if e.same?(dispatch_issue) || exceptions.size > 5
      Merb::Dispatcher::DefaultException.new(self, e.class.status)._dispatch
    else
      Merb.logger.error("Dispatching #{e.class} raised another error.")
      Merb.logger.error(Merb.exception(dispatch_issue))
      
      exceptions.unshift dispatch_issue
      retry
    end
  end
end
</code></pre>

Exception re-dispatch works like this:

* Exception class name is snake_cased to find exception handler name.
* Instance of Exceptions controller is created.
* Action with exception handler name is dispatched on Exceptions controller.

Exception re-dispatch is smart enough to handle exceptions raised by
actions of Exceptions controller. In this case DefaultException controller
is used to show a nice backtrace in the browser.

Now back to Rack application. If Merb application does not set Date header
as required by rfc2616, Rack application does it after request dispatch.
Last line of call method supposed to return
a 3-tuple of status, headers and response body, and it does using
Merb::Controller#rack_response method:

[Merb::Controller#rack_response]
<pre><code>
def rack_response
  [status, headers, body]
end
</code></pre>


h2. Where to look next.

Since we covered the whole dispatch process here briefly,
you may wonder where to look next. The answer is into different
components that put Merb controllers together, and into specific
plugins or application code that is executed along the way.